@use "../../scss/variable";
@use "../../scss/mixin";


/* 
  variable
  mixin
  nested selector
  loop
  if else
  map
  list
  @use
  @include
*/


$color-map: (
  primary: (
    default: variable.$primary-color,
    hover: variable.$primary-color-hover,
    disabled: rgba(0, 0, 0, 0.12),
    textColor:#FFFFFF
    ),
    secondary: (
      default: variable.$secondary-color,
      hover: variable.$secondary-color-hover,
      disabled: rgba(0, 0, 0, 0.12),
      textColor:#FFFFFF
      ),
      default: (
        default: variable.$default-color,
        hover: variable.$default-color-hover,
        disabled: rgba(0, 0, 0, 0.12),
        textColor:rgba(0, 0, 0, 0.87)
        ),
        );
        
        @mixin color-variant-class($color, $variant) {
          .checkbox-#{$color}-#{$variant} {
            @if $variant == "contained" {
              color: map-get(map-get($color-map, $color), "textColor");
              background-color: map-get(map-get($color-map, $color), "default");
              border: none;
              filter: drop-shadow(0px 3px 1px rgba(0, 0, 0, 0.2))
              drop-shadow(0px 2px 2px rgba(0, 0, 0, 0.14))
              drop-shadow(0px 1px 5px rgba(0, 0, 0, 0.12));
    } @else if $variant == "outlined" {
      background: none;
      color: map-get(map-get($color-map, $color), "default");
      border: 1px
      solid
      rgba(map-get(map-get($color-map, $color), "default"), 0.23);
    } @else {
      border: none;
      background: none;
      color: map-get(map-get($color-map, $color), "default");
    }
  }
  .checkbox-#{$color}-#{$variant}:hover {
    @if $variant == "contained" {
      background-color: map-get(map-get($color-map, $color), "hover");
      filter: none;
    } @else if $variant == "outlined" {
      background-color: rgba(
        map-get(map-get($color-map, $color), "default"),
        0.08
        );
        border: 1px
        solid
        rgba(map-get(map-get($color-map, $color), "default"), 0.23);
      } @else {
        background-color: rgba(
          map-get(map-get($color-map, $color), "default"),
          0.08
          );
        }
      }
      
      .checkbox-#{$color}-#{$variant}:disabled {
        @if $variant == "contained" {
          background-color: variable.$disabled-color;
          filter: none;
          color: variable.$disabled-font-color;
        } @else if $variant == "outlined" {
          background: none;
          color: variable.$disabled-font-color;
          border: 1px solid variable.$disabled-color;
        } @else {
      background: none;
      color: variable.$disabled-font-color;
    }
    pointer-events: none;
  }
  
  .checkbox-ripple-#{$color}-#{$variant}{
    pointer-events: none;
    animation: rippleEffect 0.6s linear;
    border-radius: 50%;
    @if $variant == "contained" {
      background-color: white;
    }@else{
      background-color: map-get(map-get($color-map, $color), "hover");
    }
  }
}



$colors: ("primary", "secondary", "default");
$variants: ("contained", "outlined", "text");

@mixin generate-color-variant-classes {
  @each $variant in $variants {
    @each $color in $colors {
      @include color-variant-class($color, $variant);
    }
  }
}

@include generate-color-variant-classes();

.checkbox-small {
  height: 15px;
  width: 15px;
  cursor: pointer;
  position: absolute;
  opacity: 0;
  margin: 0;
  padding: 0;
  z-index: 1;
}
.checkbox--icon-small {
  position: absolute;
  height: 15px;
  width: 15px;
}

.checkbox-medium {
  height: 18px;
  width: 18px;
  cursor: pointer;
  position: absolute;
  opacity: 0;
  margin: 0;
  padding: 0;
  z-index: 1;
}
.checkbox--icon-medium {
  position: absolute;
  height: 18px;
  width: 18px;
}

.checkbox-large {
  height: 21px;
  width: 21px;
  cursor: pointer;
  position: absolute;
  opacity: 0;
  margin: 0;
  padding: 0;
  z-index: 1;
}
.checkbox--icon-large {
  position: absolute;
  height: 21px;
  width: 21px;
}

.checkbox span{
  user-select: none;
}

.nofill svg {
  fill: blue; //TODO correct color 
}
.filled svg {
  fill: red; //TODO correct color 
}

@keyframes rippleEffect {
  0% {
    width:0px;
    height:0px;
    opacity: 0.3;
  }
  50%{
    width:75px;
    height:75px;
    opacity: 0.1;
  }
  100%{
    width:150px;
    height:150px;
    opacity: 0;
  }
}